package com.project.clothingstore.view.activity

import CartItem
import android.annotation.SuppressLint
import android.content.Context
import android.content.Intent
import android.graphics.Rect
import android.os.Bundle
import android.view.MotionEvent
import android.view.View
import android.view.inputmethod.EditorInfo
import android.view.inputmethod.InputMethodManager
import android.widget.Button
import android.widget.EditText
import android.widget.ImageView
import android.widget.RadioGroup
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.widget.addTextChangedListener
import androidx.lifecycle.ViewModelProvider
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.firebase.auth.FirebaseAuth
import com.project.clothingstore.R
import com.project.clothingstore.adapter.CheckoutAdapter
import com.project.clothingstore.service.CartService
import com.project.clothingstore.utils.helper.formatPrice
import com.project.clothingstore.viewmodel.CartViewModel
import com.project.clothingstore.viewmodel.CheckoutViewModel
import com.project.clothingstore.viewmodel.UserViewModel

class CheckoutActivity : AppCompatActivity() {

    // ViewModel
    private lateinit var viewModel: CheckoutViewModel
    private lateinit var userViewModel: UserViewModel

    // UI Components
    private lateinit var edtCustomerName: EditText
    private lateinit var edtPhone: EditText
    private lateinit var edtProvince: EditText
    private lateinit var edtDistrict: EditText
    private lateinit var edtWard: EditText
    private lateinit var edtAddress: EditText
    private lateinit var edtCoupon: EditText
    private lateinit var btnApplyCoupon: Button
    private lateinit var rgShipping: RadioGroup
    private lateinit var rgPayment: RadioGroup
    private lateinit var recyclerView: RecyclerView
    private lateinit var btnCheckout: Button
    private lateinit var tvTotalPrice: TextView
    private lateinit var btnBack: ImageView
    private lateinit var tvProductPrice: TextView
    private lateinit var cartViewModel: CartViewModel
    private lateinit var tvShipping: TextView
    private lateinit var tvDiscount: TextView

    @SuppressLint("ClickableViewAccessibility")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_checkout)
        val cartService = CartService()
        // Init ViewModel
        viewModel = ViewModelProvider(this)[CheckoutViewModel::class.java]
        userViewModel = ViewModelProvider(this)[UserViewModel::class.java]
        val viewModelFactory = CartViewModelFactory(cartService)
        cartViewModel = ViewModelProvider(this, viewModelFactory).get(CartViewModel::class.java)
        // Init UI Components
        edtCustomerName = findViewById(R.id.edtCustomerName)
        edtPhone = findViewById(R.id.edtPhoneNumber)
        edtProvince = findViewById(R.id.edtProvince)
        edtDistrict = findViewById(R.id.edtDistrict)
        edtWard = findViewById(R.id.edtWard)
        edtAddress = findViewById(R.id.edtAddressDetail)
        edtCoupon = findViewById(R.id.edtCoupon)
        btnApplyCoupon = findViewById(R.id.btnApplyCoupon)
        rgShipping = findViewById(R.id.rgShipping)
        rgPayment = findViewById(R.id.rgPayment)
        btnCheckout = findViewById(R.id.btnCheckout)
        recyclerView = findViewById(R.id.rvOrderItems)
        tvTotalPrice = findViewById(R.id.tvTotal) // TextView cho t·ªïng ti·ªÅn
        btnBack = findViewById(R.id.btnBack)
        tvProductPrice = findViewById(R.id.tvProductPrice) // TextView cho t·ªïng ti·ªÅn s·∫£n ph·∫©m
        tvShipping = findViewById(R.id.tvShipping) // TextView cho ph√≠ v·∫≠n chuy·ªÉn
        tvDiscount = findViewById(R.id.tvDiscount) // TextView cho m√£ gi·∫£m gi√°
        btnBack.setOnClickListener() {
            finish()
        }
        rgShipping.check(R.id.rbStandardShipping)
        val rootLayout: View = findViewById(R.id.root_layout) // L·∫•y root layout c·ªßa Activity

        rootLayout.setOnTouchListener { v, event ->
            val currentFocus = currentFocus
            if (currentFocus != null && event.action == MotionEvent.ACTION_DOWN) {
                val outRect = Rect()
                currentFocus.getGlobalVisibleRect(outRect)
                // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ch·∫°m ra ngo√†i c√°c tr∆∞·ªùng nh·∫≠p li·ªáu
                if (!outRect.contains(event.rawX.toInt(), event.rawY.toInt())) {
                    hideKeyboard(currentFocus) // ƒê√≥ng b√†n ph√≠m khi nh·∫•n ra ngo√†i
                }
            }
            false
        }
        edtAddress.setOnEditorActionListener { v, actionId, event ->
            if (actionId == EditorInfo.IME_ACTION_DONE) {
                // X·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "Ho√†n t·∫•t"
                hideKeyboard(v) // ·∫®n b√†n ph√≠m
                true // Tr·∫£ v·ªÅ true ƒë·ªÉ ng·ª´ng x·ª≠ l√Ω s·ª± ki·ªán m·∫∑c ƒë·ªãnh
            } else {
                false
            }
        }
        // Nh·∫≠n danh s√°ch s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn t·ª´ Intent
        val selectedItems = intent.getParcelableArrayListExtra<CartItem>("selected_items")
        selectedItems?.let {
            viewModel.orderItems = it
            viewModel.calculateTotalPrice()
            viewModel.calculateTotalPriceOfProducts()
        }

        // Setup RecyclerView
        recyclerView.layoutManager = LinearLayoutManager(this)
        recyclerView.adapter = CheckoutAdapter(this, viewModel.orderItems)
        viewModel.totalPriceProduct.observe(this) { totalPriceProduct ->
            tvProductPrice.text = "T·ªïng ti·ªÅn: ${formatPrice(totalPriceProduct)}"
        }
        // L·∫Øng nghe thay ƒë·ªïi totalPrice t·ª´ ViewModel v√† c·∫≠p nh·∫≠t UI
        viewModel.totalPrice.observe(this) { totalPrice ->
            tvTotalPrice.text = "T·ªïng ti·ªÅn: ${formatPrice(totalPrice)}"
        }
        var cartId: String = "";
        val uid = FirebaseAuth.getInstance().currentUser?.uid
        uid?.let {
            userViewModel.fetchUserInfo(it) // G·ªçi h√†m load d·ªØ li·ªáu tr∆∞·ªõc

            // L·∫Øng nghe khi d·ªØ li·ªáu currentUser ƒë∆∞·ª£c c·∫≠p nh·∫≠t
            userViewModel.getCurrentUser().observe(this) { user ->
                user?.let {
                    edtCustomerName.setText(it.fullName)
                    edtPhone.setText(it.phoneNumber)
                    edtProvince.setText(it.address.province)
                    edtDistrict.setText(it.address.district)
                    edtWard.setText(it.address.ward)
                    edtAddress.setText(it.address.street)
                    cartId = it.cartId // L∆∞u cartId t·ª´ user
                }
            }
        }
        edtCustomerName.addTextChangedListener { editable ->
            viewModel.customerName.value = editable.toString().trim()
        }

        edtPhone.addTextChangedListener { editable ->
            viewModel.phoneCustomer.value = editable.toString().trim()
        }

        edtProvince.addTextChangedListener { editable ->
            viewModel.province.value = editable.toString().trim()
        }

        edtDistrict.addTextChangedListener { editable ->
            viewModel.district.value = editable.toString().trim()
        }

        edtWard.addTextChangedListener { editable ->
            viewModel.ward.value = editable.toString().trim()
        }

        edtAddress.addTextChangedListener { editable ->
            viewModel.address.value = editable.toString().trim()
        }


        // N·∫øu ch·ªâ c√≥ 1 ph∆∞∆°ng th·ª©c thanh to√°n th√¨ m·∫∑c ƒë·ªãnh ch·ªçn ph∆∞∆°ng th·ª©c ƒë√≥
        if (rgPayment.childCount == 1) {
            rgPayment.check(rgPayment.getChildAt(0).id)
        }
        val userId = FirebaseAuth.getInstance().currentUser?.uid
        // L·∫Øng nghe s·ª± ki·ªán khi ng∆∞·ªùi d√πng nh·∫•n n√∫t Thanh to√°n
        btnCheckout.setOnClickListener {
            if (isInputValid()) {
                val phoneNumber = edtPhone.text.toString()

                if (isPhoneNumberValid(phoneNumber)) {
                    userId?.let {
                        viewModel.submitOrder(it)

                        // L·∫Øng nghe k·∫øt qu·∫£ submit ƒë·ªÉ x√≥a gi·ªè h√†ng
                        viewModel.orderStatus.observe(this) { isSuccess ->
                            if (isSuccess == true) {
                                // üßπ X√≥a gi·ªè h√†ng sau khi ƒë·∫∑t h√†ng th√†nh c√¥ng
                                cartViewModel.deleteMultipleItemsFromCart(
                                    viewModel.orderItems,
                                    cartId
                                )
                                Toast.makeText(this, "ƒê·∫∑t h√†ng th√†nh c√¥ng!", Toast.LENGTH_SHORT)
                                    .show()
                                val intent =
                                    Intent(this, CheckoutSuccessActivity::class.java).apply {
                                        flags =
                                            Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
                                    }
                                startActivity(intent)
                                finish()
                            } else {
                                Toast.makeText(
                                    this,
                                    "ƒê·∫∑t h√†ng th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!",
                                    Toast.LENGTH_SHORT
                                ).show()
                            }
                        }
                    }
                } else {
                    Toast.makeText(this, "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá", Toast.LENGTH_SHORT).show()
                }
            } else {
                Toast.makeText(this, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin", Toast.LENGTH_SHORT).show()
            }
        }


        // L·∫Øng nghe s·ª± thay ƒë·ªïi c·ªßa ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn v√† c·∫≠p nh·∫≠t t·ªïng ti·ªÅn
        rgShipping.setOnCheckedChangeListener { _, checkedId ->
            // Ki·ªÉm tra ID c·ªßa radio button ƒë∆∞·ª£c ch·ªçn
            when (checkedId) {
                R.id.rbStandardShipping -> {
                    viewModel.shippingMethod.value = "standard"  // N·∫øu ch·ªçn "Giao h√†ng nhanh"
                }

                R.id.rbExpressShipping -> {
                    viewModel.shippingMethod.value = "express"  // N·∫øu ch·ªçn "Giao h√†ng h·ªèa t·ªëc"
                }
            }
            viewModel.calculateTotalPrice()

        }
        viewModel.shippingPrice.observe(this) { shippingPrice ->
            tvShipping.text = formatPrice(shippingPrice)
        }

        viewModel.couponDiscountAmount.observe(this) { discount ->
            tvDiscount.text = formatPrice(discount)
        }

        // L·∫Øng nghe s·ª± thay ƒë·ªïi khi nh·∫≠p m√£ gi·∫£m gi√° v√† c·∫≠p nh·∫≠t t·ªïng ti·ªÅn
        btnApplyCoupon.setOnClickListener {
            val couponCode = edtCoupon.text.toString()
            if (userId != null) {
                viewModel.applyCouponDiscount(couponCode, userId)
            }
        }

        // Trong Activity ho·∫∑c Fragment c·ªßa b·∫°n
        viewModel.couponErrorMessage.observe(this, { errorMessage ->
            if (errorMessage.isNotBlank()) {
                // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
                Toast.makeText(this, errorMessage, Toast.LENGTH_SHORT).show()
            }
        })


    }

    // Ki·ªÉm tra c√°c tr∆∞·ªùng nh·∫≠p li·ªáu c√≥ h·ª£p l·ªá kh√¥ng
    private fun isInputValid(): Boolean {
        return edtCustomerName.text.isNotEmpty() &&
                edtPhone.text.isNotEmpty() &&
                edtProvince.text.isNotEmpty() &&
                edtDistrict.text.isNotEmpty() &&
                edtWard.text.isNotEmpty() &&
                edtAddress.text.isNotEmpty()
    }

    fun isPhoneNumberValid(phoneNumber: String): Boolean {
        // Bi·ªÉu th·ª©c ch√≠nh quy cho s·ªë ƒëi·ªán tho·∫°i h·ª£p l·ªá t·∫°i Vi·ªát Nam
        val phonePattern = "^(\\+84|0)(9|8|7|3|4|5|6|1)[0-9]{8}$".toRegex()

        return phonePattern.matches(phoneNumber)
    }

    fun hideKeyboard(view: View) {
        val imm = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
        imm.hideSoftInputFromWindow(view.windowToken, 0)
    }
}


