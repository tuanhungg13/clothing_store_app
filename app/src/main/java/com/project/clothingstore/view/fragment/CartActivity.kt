package com.project.clothingstore.view.fragment

import android.annotation.SuppressLint
import android.os.Bundle
import android.view.View
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.Observer
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.project.clothingstore.R
import com.project.clothingstore.adapter.CartAdapter
import com.project.clothingstore.service.CartService
import com.project.clothingstore.utils.helper.formatPrice
import com.project.clothingstore.viewmodel.CartViewModel

class CartActivity : AppCompatActivity() {

    private lateinit var cartViewModel: CartViewModel
    private lateinit var cartAdapter: CartAdapter
    private lateinit var rvCartItems: RecyclerView
    private lateinit var tvTotal: TextView
    private lateinit var btnCheckout: TextView
    private lateinit var tvProductPrice: TextView
    private lateinit var btnBack: ImageView
    private lateinit var shimmerLayout: View

    @SuppressLint("MissingInflatedId")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_cart)

        // Kh·ªüi t·∫°o c√°c view
        rvCartItems = findViewById(R.id.rvCartItems)
        tvTotal = findViewById(R.id.tvTotal)
        btnCheckout = findViewById(R.id.btnCheckout)
        tvProductPrice = findViewById(R.id.tvProductPrice)
        btnBack = findViewById(R.id.btnBack)
        shimmerLayout = findViewById(R.id.shimmerLayout)

        btnBack.setOnClickListener {
            finish() // üëâ quay v·ªÅ Activity tr∆∞·ªõc ƒë√≥
        }
// ·∫®n RV khi ch∆∞a c√≥ data
        rvCartItems.visibility = View.GONE
        shimmerLayout.visibility = View.VISIBLE
        // Kh·ªüi t·∫°o CartService
        val cartService = CartService() // Ho·∫∑c cung c·∫•p d·ªãch v·ª• kh√°c t√πy v√†o c√°ch b·∫°n inject

        // Kh·ªüi t·∫°o ViewModel b·∫±ng factory
        val factory = CartViewModelFactory(cartService)
        cartViewModel = ViewModelProvider(this, factory).get(CartViewModel::class.java)

        // L·∫•y d·ªØ li·ªáu gi·ªè h√†ng
        val cartId = "8BZkdJaHU7SS0VH72mnz"
        cartViewModel.fetchCartItems(cartId)

        // C·∫≠p nh·∫≠t UI khi c√≥ thay ƒë·ªïi
        cartViewModel.cartItems.observe(this, Observer { items ->
            // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m
            shimmerLayout.visibility = View.GONE
            rvCartItems.visibility = View.VISIBLE
            cartAdapter = CartAdapter(
                items.toMutableList(),
                onQuantityChanged = { cartItem, newQuantity ->
                    cartViewModel.updateItemQuantity(cartItem, newQuantity, cartId)
                },
                onItemRemoved = { cartItem ->
                    cartViewModel.deleteItemFromCart(cartItem, cartId)
                },
                onSelectionChanged = { cartItem, isSelected ->
                    cartViewModel.toggleItemSelection(cartItem, isSelected)
                }

            )
            rvCartItems.layoutManager = LinearLayoutManager(this)
            rvCartItems.adapter = cartAdapter
        })

        // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn khi thay ƒë·ªïi
        cartViewModel.totalPrice.observe(this, Observer { total ->
            tvProductPrice.text = formatPrice(total)
            tvTotal.text = formatPrice(total)
        })

        // L·∫Øng nghe s·ª± ki·ªán n√∫t thanh to√°n
        btnCheckout.setOnClickListener {
            val selectedItems =
                cartViewModel.cartItems.value?.filter { it.isSelected } ?: emptyList()

            if (selectedItems.isNotEmpty()) {
//                val intent = Intent(this, CheckoutActivity::class.java)
//                intent.putParcelableArrayListExtra("selected_items", ArrayList(selectedItems))
//                startActivity(intent)
            } else {
                Toast.makeText(this, "Vui l√≤ng ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ thanh to√°n", Toast.LENGTH_SHORT)
                    .show()
            }
        }
    }
}


class CartViewModelFactory(private val cartService: CartService) : ViewModelProvider.Factory {
    override fun <T : ViewModel> create(modelClass: Class<T>): T {
        if (modelClass.isAssignableFrom(CartViewModel::class.java)) {
            @Suppress("UNCHECKED_CAST")
            return CartViewModel(cartService) as T
        }
        throw IllegalArgumentException("Unknown ViewModel class")
    }
}

